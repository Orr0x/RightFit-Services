// Prisma Schema for RightFit Services
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ===== CORE ENTITIES =====

model Tenant {
  id                  String             @id @default(uuid())
  tenant_name         String             @db.VarChar(100)
  subscription_status SubscriptionStatus @default(TRIAL)
  trial_ends_at       DateTime?
  created_at          DateTime           @default(now())
  updated_at          DateTime           @updatedAt

  // Relationships
  users                  User[]
  properties             Property[]
  work_orders            WorkOrder[]
  contractors            Contractor[]
  certificates           Certificate[]
  photos                 Photo[]
  devices                Device[]
  notifications          Notification[]
  property_tenants       PropertyTenant[]
  financial_transactions FinancialTransaction[]
  property_budgets       PropertyBudget[]

  @@map("tenants")
}

enum SubscriptionStatus {
  TRIAL
  ACTIVE
  PAUSED
  CANCELLED
}

model User {
  id            String    @id @default(uuid())
  tenant_id     String
  email         String    @unique @db.VarChar(255)
  password_hash String    @db.VarChar(255)
  full_name     String    @db.VarChar(100)
  role          UserRole  @default(ADMIN)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  // Relationships
  tenant             Tenant         @relation(fields: [tenant_id], references: [id])
  properties         Property[]     @relation("PropertyOwner")
  work_orders        WorkOrder[]    @relation("WorkOrderCreator")
  photos_uploaded    Photo[]        @relation("PhotoUploader")
  contractor_profile Contractor?    @relation("ContractorUser")
  devices            Device[]
  notifications      Notification[]

  @@index([tenant_id])
  @@index([email])
  @@map("users")
}

enum UserRole {
  ADMIN
  MEMBER
  CONTRACTOR
}

model PasswordResetToken {
  id         String    @id @default(uuid())
  user_id    String
  token      String    @unique
  expires_at DateTime
  used_at    DateTime?
  created_at DateTime  @default(now())

  @@index([token])
  @@index([user_id])
  @@map("password_reset_tokens")
}

model Property {
  id                  String         @id @default(uuid())
  tenant_id           String
  owner_user_id       String
  name                String         @db.VarChar(100)
  address_line1       String         @db.VarChar(255)
  address_line2       String?        @db.VarChar(255)
  city                String         @db.VarChar(100)
  postcode            String         @db.VarChar(10)
  property_type       PropertyType
  bedrooms            Int            @default(0)
  bathrooms           Int            @default(0)
  access_instructions String?        @db.Text
  status              PropertyStatus @default(ACTIVE)
  created_at          DateTime       @default(now())
  updated_at          DateTime       @updatedAt
  deleted_at          DateTime?

  // Relationships
  tenant                 Tenant                 @relation(fields: [tenant_id], references: [id])
  owner                  User                   @relation("PropertyOwner", fields: [owner_user_id], references: [id])
  work_orders            WorkOrder[]
  certificates           Certificate[]
  photos                 Photo[]
  property_tenants       PropertyTenant[]
  financial_transactions FinancialTransaction[]
  property_budget        PropertyBudget?

  @@index([tenant_id])
  @@index([owner_user_id])
  @@index([postcode])
  @@index([tenant_id, deleted_at])
  @@map("properties")
}

enum PropertyType {
  HOUSE
  FLAT
  COTTAGE
  COMMERCIAL
}

enum PropertyStatus {
  ACTIVE
  INACTIVE
}

model WorkOrder {
  id                  String            @id @default(uuid())
  tenant_id           String
  property_id         String
  contractor_id       String?
  created_by_user_id  String
  title               String            @db.VarChar(255)
  description         String?           @db.Text
  status              WorkOrderStatus   @default(OPEN)
  priority            WorkOrderPriority @default(MEDIUM)
  category            WorkOrderCategory @default(OTHER)
  due_date            DateTime?
  estimated_cost      Decimal?          @db.Decimal(10, 2)
  actual_cost         Decimal?          @db.Decimal(10, 2)
  started_at          DateTime?
  completed_at        DateTime?
  completion_note     String?           @db.VarChar(500)
  cancellation_reason String?           @db.VarChar(500)
  created_at          DateTime          @default(now())
  updated_at          DateTime          @updatedAt
  deleted_at          DateTime?

  // Relationships
  tenant     Tenant      @relation(fields: [tenant_id], references: [id])
  property   Property    @relation(fields: [property_id], references: [id])
  contractor Contractor? @relation(fields: [contractor_id], references: [id])
  created_by User        @relation("WorkOrderCreator", fields: [created_by_user_id], references: [id])
  photos     Photo[]

  @@index([tenant_id])
  @@index([property_id])
  @@index([contractor_id])
  @@index([status])
  @@index([priority])
  @@index([due_date])
  @@map("work_orders")
}

enum WorkOrderStatus {
  OPEN
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum WorkOrderPriority {
  HIGH
  MEDIUM
  LOW
}

enum WorkOrderCategory {
  PLUMBING
  ELECTRICAL
  HEATING
  APPLIANCES
  EXTERIOR
  INTERIOR
  OTHER
}

model Contractor {
  id           String    @id @default(uuid())
  tenant_id    String
  user_id      String?   @unique
  name         String    @db.VarChar(100)
  trade        String    @db.VarChar(50)
  company_name String?   @db.VarChar(100)
  phone        String    @db.VarChar(20)
  email        String?   @db.VarChar(255)
  notes        String?   @db.VarChar(500)
  sms_opt_out  Boolean   @default(false)
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  // Relationships
  tenant      Tenant      @relation(fields: [tenant_id], references: [id])
  user        User?       @relation("ContractorUser", fields: [user_id], references: [id])
  work_orders WorkOrder[]

  @@index([tenant_id])
  @@index([user_id])
  @@index([tenant_id, trade])
  @@map("contractors")
}

model Photo {
  id                    String      @id @default(uuid())
  tenant_id             String
  uploaded_by_user_id   String
  property_id           String?
  work_order_id         String?
  s3_key                String      @db.VarChar(255)
  s3_url                String      @db.VarChar(500)
  thumbnail_url         String      @db.VarChar(500)
  file_size             Int
  mime_type             String      @db.VarChar(50)
  width                 Int
  height                Int
  label                 PhotoLabel?
  caption               String?     @db.Text
  gps_latitude          Decimal?    @db.Decimal(10, 8)
  gps_longitude         Decimal?    @db.Decimal(11, 8)
  quality_check_passed  Boolean?
  quality_check_details Json?
  created_at            DateTime    @default(now())

  // Relationships
  tenant      Tenant     @relation(fields: [tenant_id], references: [id])
  uploaded_by User       @relation("PhotoUploader", fields: [uploaded_by_user_id], references: [id])
  property    Property?  @relation(fields: [property_id], references: [id])
  work_order  WorkOrder? @relation(fields: [work_order_id], references: [id])

  @@index([tenant_id])
  @@index([property_id])
  @@index([work_order_id])
  @@index([created_at])
  @@map("photos")
}

enum PhotoLabel {
  BEFORE
  DURING
  AFTER
  PROPERTY
}

model Certificate {
  id                 String          @id @default(uuid())
  tenant_id          String
  property_id        String
  certificate_type   CertificateType
  issue_date         DateTime
  expiry_date        DateTime
  document_url       String          @db.VarChar(500)
  certificate_number String?         @db.VarChar(100)
  issuer_name        String?         @db.VarChar(100)
  notes              String?         @db.Text
  created_at         DateTime        @default(now())
  updated_at         DateTime        @updatedAt
  deleted_at         DateTime?

  // Relationships
  tenant   Tenant   @relation(fields: [tenant_id], references: [id])
  property Property @relation(fields: [property_id], references: [id])

  @@index([tenant_id])
  @@index([property_id])
  @@index([expiry_date])
  @@index([certificate_type])
  @@map("certificates")
}

enum CertificateType {
  GAS_SAFETY
  ELECTRICAL
  EPC
  STL_LICENSE
  OTHER
}

model Device {
  id            String         @id @default(uuid())
  user_id       String
  tenant_id     String
  push_token    String         @db.VarChar(255)
  device_id     String         @db.VarChar(255)
  platform      DevicePlatform
  is_active     Boolean        @default(true)
  registered_at DateTime       @default(now())

  // Relationships
  user   User   @relation(fields: [user_id], references: [id])
  tenant Tenant @relation(fields: [tenant_id], references: [id])

  @@unique([device_id, user_id])
  @@index([user_id])
  @@index([tenant_id])
  @@map("devices")
}

enum DevicePlatform {
  IOS
  ANDROID
}

model Notification {
  id                String           @id @default(uuid())
  user_id           String
  tenant_id         String
  notification_type NotificationType
  title             String           @db.VarChar(255)
  body              String           @db.Text
  data              Json?
  sent_at           DateTime         @default(now())
  read_at           DateTime?

  // Relationships
  user   User   @relation(fields: [user_id], references: [id])
  tenant Tenant @relation(fields: [tenant_id], references: [id])

  @@index([user_id, read_at])
  @@index([tenant_id])
  @@map("notifications")
}

enum NotificationType {
  CERTIFICATE_EXPIRY
  PHOTO_QUALITY
  WORK_ORDER_ASSIGNED
  SUBSCRIPTION_ENDING
  PAYMENT_FAILED
  SYSTEM_ANNOUNCEMENT
  LEASE_EXPIRING
  RENT_OVERDUE
  BUDGET_ALERT
}

// ===== TENANT MANAGEMENT =====

model PropertyTenant {
  id                String        @id @default(uuid())
  tenant_id         String
  property_id       String
  name              String        @db.VarChar(100)
  email             String?       @db.VarChar(255)
  phone             String?       @db.VarChar(20)
  move_in_date      DateTime
  lease_expiry_date DateTime?
  rent_amount       Decimal       @db.Decimal(10, 2)
  rent_frequency    RentFrequency
  rent_due_day      Int? // Day of month for monthly rent (1-31)
  status            TenantStatus  @default(ACTIVE)
  notes             String?       @db.Text
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  deleted_at        DateTime?

  // Relationships
  tenant        Tenant        @relation(fields: [tenant_id], references: [id])
  property      Property      @relation(fields: [property_id], references: [id])
  rent_payments RentPayment[]

  @@index([tenant_id])
  @@index([property_id])
  @@index([status])
  @@index([lease_expiry_date])
  @@map("property_tenants")
}

enum TenantStatus {
  ACTIVE
  INACTIVE
  NOTICE_GIVEN
}

enum RentFrequency {
  WEEKLY
  MONTHLY
  QUARTERLY
}

model RentPayment {
  id                 String         @id @default(uuid())
  property_tenant_id String
  amount             Decimal        @db.Decimal(10, 2)
  payment_date       DateTime
  expected_date      DateTime?
  payment_method     PaymentMethod?
  reference          String?        @db.VarChar(100)
  notes              String?        @db.Text
  created_at         DateTime       @default(now())

  // Relationships
  property_tenant PropertyTenant @relation(fields: [property_tenant_id], references: [id])

  @@index([property_tenant_id])
  @@index([payment_date])
  @@index([expected_date])
  @@map("rent_payments")
}

enum PaymentMethod {
  BANK_TRANSFER
  CASH
  CHEQUE
  STANDING_ORDER
  OTHER
}

// ===== FINANCIAL MANAGEMENT =====

model FinancialTransaction {
  id          String           @id @default(uuid())
  tenant_id   String
  property_id String
  type        TransactionType
  category    ExpenseCategory?
  amount      Decimal          @db.Decimal(10, 2)
  date        DateTime
  description String           @db.VarChar(500)
  receipt_url String?          @db.VarChar(500)
  notes       String?          @db.Text
  created_at  DateTime         @default(now())
  updated_at  DateTime         @updatedAt
  deleted_at  DateTime?

  // Relationships
  tenant   Tenant   @relation(fields: [tenant_id], references: [id])
  property Property @relation(fields: [property_id], references: [id])

  @@index([tenant_id])
  @@index([property_id])
  @@index([type])
  @@index([date])
  @@index([category])
  @@map("financial_transactions")
}

enum TransactionType {
  INCOME
  EXPENSE
}

enum ExpenseCategory {
  MAINTENANCE
  REPAIRS
  UTILITIES
  INSURANCE
  PROPERTY_TAX
  MANAGEMENT_FEES
  MORTGAGE
  LEGAL_FEES
  CLEANING
  GARDENING
  SAFETY_CERTIFICATES
  OTHER
}

model PropertyBudget {
  id              String   @id @default(uuid())
  tenant_id       String
  property_id     String   @unique
  monthly_budget  Decimal  @db.Decimal(10, 2)
  alert_threshold Decimal  @default(0.8) @db.Decimal(3, 2) // 0.8 = 80%
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  // Relationships
  tenant   Tenant   @relation(fields: [tenant_id], references: [id])
  property Property @relation(fields: [property_id], references: [id])

  @@index([tenant_id])
  @@map("property_budgets")
}
